

  #STAGE 1
#create the main loop
#print the board
#create your loop
#get the user input
#put the user input in the board


  #STAGE 2
#check for player win (8 possibilities)

  #STAGE 3 
#check the second player (NOT THE COMPUTER)
#check for the second player win (8 possibilities)
#check for a full board (TIE)

  #STAGE 4
#combine stages II & III into 1 function
#def is_winner(board,player):
#create a function to check if the board is full
#def is_board_full(board)

  #STAGE 5
#creating our game AI
#def get_computer_move(board,player):
#i) return random number
#ii) make sure random number is for any empty spot

#import
import os
import time
import random

#define the board
board = [""," "," "," "," "," "," "," "," "," ",]

#print the header
def print_header():
	print(""" _______ _   _______      _______         
 |__   __(_) |__   __|    |__   __|        
    | |   _  ___| | __ _  ___| | ___   ___ 
    | |  | |/ __| |/ _` |/ __| |/ _ \ / _ \
    | |  | | (__| | (_| | (__| | (_) |  __/
    |_|  |_|\___|_|\__,_|\___|_|\___/ \___|
  
    To play Tic-Tac-Toe, you need to get three in a row...
	Your choices are defined, they must be from	1,9...
 
""")	

#define the print_board function
def print_board():
	print ("   |   |   ")
	print (" "+board[7]+" | "+board[8]+" | "+board[9]+" ")
	print ("   |   |   ")
	print ("---|---|---")
	print ("   |   |   ")
	print (" "+board[4]+" | "+board[5]+" | "+board[6]+" ")
	print ("   |   |   ")
	print ("---|---|---")
	print ("   |   |   ")
	print (" "+board[1]+" | "+board[2]+" | "+board[3]+" ")
	print ("   |   |   ")
	
def is_player_winner(board,player):
	if (board[1]==(player) and board[2]==(player) and board[3]==(player)) or \
		(board[1]==(player) and board[4]==(player) and board[7]==(player)) or \
		(board[1]==(player) and board[5]==(player) and board[9]==(player)) or \
		(board[2]==(player) and board[5]==(player) and board[8]==(player)) or \
		(board[3]==(player) and board[6]==(player) and board[9]==(player)) or \
		(board[3]==(player) and board[5]==(player) and board[7]==(player)) or \
		(board[4]==(player) and board[5]==(player) and board[6]==(player)) or \
		(board[7]==(player) and board[8]==(player) and board[9]==(player)):
		return True
	else:
		return False

"""
def is_y_winner(board):
	if (board[1]==("O") and board[2]==("O") and board[3]==("O")) or \
		(board[1]==("O") and board[4]==("O") and board[7]==("O")) or \
		(board[1]==("O") and board[5]==("O") and board[9]==("O")) or \
		(board[2]==("O") and board[5]==("O") and board[8]==("O")) or \
		(board[3]==("O") and board[6]==("O") and board[9]==("O")) or \
		(board[3]==("O") and board[5]==("O") and board[7]==("O")) or \
		(board[4]==("O") and board[5]==("O") and board[6]==("O")) or \
		(board[7]==("O") and board[8]==("O") and board[9]==("O")):
		return True
	else:
		return False
"""
def is_board_full(board):
	if (" ") in board:
		return False
	else:
		return True
	
def get_computer_move(board,player):
	
	"""
	#check columns for a win
	for i in [1,2,3]:
		if board[i] == player and board[i+3] == player and board[i+6] == " ":
			return i+6
		if board[i+3] == player and board[i+6] == player and board[i] == " ":
			return i
		if board[i] == player and board[i+6] == player and board[i+3] == " ":
			return i+3
	"""
	"""
	if board[1] == player and board[4] == player and board[7] == " ":
		return 8
	if board[4] == player and board[7] == player and board[1] == " ":
		return 2
	if board[1] == player and board[7] == player and board[4] == " ":
		return 5


	if board[2] == player and board[5] == player and board[8] == " ":
		return 8
	if board[5] == player and board[8] == player and board[2] == " ":
		return 2
	if board[2] == player and board[8] == player and board[5] == " ":
		return 5


	if board[3] == player and board[6] == player and board[9] == " ":
		return 9
	if board[6] == player and board[9] == player and board[3] == " ":
		return 3
	if board[3] == player and board[9] == player and board[6] == " ":
		return 6
	"""
	#check for a win
	for i in range (1,10):
		if board[i] == " ":
			board[i] = player
			if is_player_winner(board,player):
				return i
			else:
				board[i] = " "



	
	#if the center square is empty choose that
	if board[5] == " ":
		return 5

	while True:
		move = random.randint(1,9)
		#if the move is blank, go ahead and return, otherwise try again
		if board[move] == (" "):		
			return move
			break
	
	return 5




while True:
	os.system("clear")
	print_header()
	print_board()

	#get player X input
	choice_x = int(input("please choose an empty space for X : "))
	
	#check to see if the space is empty first
	if board[choice_x] == (" "):
		board[choice_x] = ("X")
	else:
		print("\nsorry, that space is not empty!\n\n\n")
		time.sleep(1)
		
	#check for X win
	if is_player_winner(board,"X"):
		os.system("clear")
		print_header()
		print_board()
		print("\n\nX wins! Congratulations\n\n")
		break
	
	os.system("clear")
	print_header()
	print_board()
		
	#check for a tie (is the board full)
	
	if is_board_full(board):
		print("\nTie!\n")
		break	
	

	#get player O input
	choice_o = get_computer_move(board,"O")

	#check to see if the space is empty first
	if board[choice_o] == (" "):
		board[choice_o] = ("O")
	else:
		print("\nsorry, that space is not empty!\n\n\n")
		time.sleep(1)
	
		
	#check for O win
	if is_player_winner(board,"O"):
		os.system("clear")
		print_header()
		print_board()		
		print("\n\nO wins! Congratulations\n\n")
		break
	
	#check tie (unnecessary)
	if is_board_full(board):
		print("\nTie!\n")
		break	
	

		





	
